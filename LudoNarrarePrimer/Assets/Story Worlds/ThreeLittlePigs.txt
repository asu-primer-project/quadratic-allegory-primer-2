//Three Little Pigs Demo Story World
//Used to show a very basic story world that mixes random agents and interaction to have dynamic results.
//Shows off how with LudoNarrare, no story is a simple predefined network of events, but rather something more procedural.
//Also demonstrates the subtle integration of educational material into these types of worlds, in this
//case namely education in basic arithmetic and finance. Subversive and dark in that the user controls
//the wolf trying to eat the pigs.

storyworld ThreeLittlePigs
{
	///////////////
	// Beginning //
	///////////////
	beginning
	{
		page title
		{
			text: "The Three Little Pigs";
		}
		
		page beginA
		{
			text: "There once lived three little pigs.";
		}
		
		page beginB
		{
			text: "One was called Little Pig.";
		}
		
		page beginC
		{
			text: "Another was called Littler Pig.";
		}
		
		page beginD
		{
			text: "The last was called Littlest Pig.";
		}
		
		page beginE
		{
			text: "These three pigs knew they lived in wolf country, so they decided to build homes for protection.";
		}
	}
	
	//////////////
	// Entities //
	//////////////
	//Abstract
	entity Story
	{
		icon: "Story", 0, 0, 0;
		
		agent: random;
		tag: story;
	}
	
	entity MoneyGiver
	{
		icon: "Money Giver", 0, 0, 0;
		
		agent: random;
		tag: moneyGiver;
	}
	
	//Characters
	entity Wolf
	{
		icon: "Wolf", 0, 0, 0;

		agent: user;
		string: name, "Wolf";
		num: money, 20;
		tag: wolf;
		
		//Pronouns
		string: pnSubject, "he";
		string: pnObject, "him";
		string: pnOwner, "his";
	}
	
	entity LittlestPig
	{
		icon: "Littlest Pig", 0, 0, 0;
	
		agent: random;
		string: name, "Littlest Pig";
		num: money, 10;
		tag: pig;
		tag: active;
		relate: home, LittlestPigHouse;

		//Pronouns
		string: pnSubject, "he";
		string: pnObject, "him";
		string: pnOwner, "his";
	}
	
	entity LittlerPig
	{
		icon: "Littler Pig", 0, 0, 0;
	
		agent: random;
		string: name, "Littler Pig";
		num: money, 10;
		tag: pig;
		tag: active;
		relate: home, LittlerPigHouse;

		//Pronouns
		string: pnSubject, "she";
		string: pnObject, "her";
		string: pnOwner, "her";
	}
	
	entity LittlePig
	{
		icon: "Little Pig", 0, 0, 0;
	
		agent: random;
		string: name, "Little Pig";
		num: money, 10;
		tag: pig;
		tag: active;
		relate: home, LittlePigHouse;
		
		//Pronouns
		string: pnSubject, "she";
		string: pnObject, "her";
		string: pnOwner, "her";
	}
	
	//Places
	entity Store
	{
		icon: "Store", 0, 0, 0;
	
		tag: place;
		string: name, "the hardware store";
	}
	
	entity LittlestPigHouse
	{
		icon: "Littlest Pig's House", 0, 0, 0;
	
		tag: place;
		tag: home;
		string: name, "Littlest Pig's house";
	}
	
	entity LittlerPigHouse
	{
		icon: "Littler Pig's House", 0, 0, 0;
	
		tag: place;
		tag: home;
		string: name, "Littler Pig's house";
	}
	
	entity LittlePigHouse
	{
		icon: "Little Pig's House", 0, 0, 0;
	
		tag: place;
		tag: home;
		string: name, "Little Pig's house";
	}
	
	//Supplies
	entity Wood
	{
		icon: "Wood", 0, 0, 0;
	
		string: name, "wood";
		num: cost, 5;
		tag: supplies;
	}
	
	entity Straw
	{
		icon: "Straw", 0, 0, 0;
	
		string: name, "straw";
		num: cost, 2;
		tag: supplies;
	}
	
	entity Brick
	{
		icon: "Brick", 0, 0, 0;
	
		string: name,"brick";
		num: cost, 10;
		tag: supplies;
	}	
	
	entity Glass
	{
		icon: "Glass", 0, 0, 0;
	
		string: name, "glass";
		num: cost, 20;
		tag: supplies;
	}
	
	entity Steel
	{
		icon: "Steel", 0, 0, 0;
	
		string: name, "steel";
		num: cost, 30;
		tag: supplies;
	}
	
	entity Diamond
	{
		icon: "Diamond", 0, 0, 0;
	
		string: name, "diamond";
		num: cost, 1000000;
		tag: supplies;
	}
	
	entity Gold
	{
		icon: "Gold", 0, 0, 0;
	
		string: name, "gold";
		num: cost, 1000000;
		tag: supplies;
	}
	
	entity Canvas
	{
		icon: "Canvas", 0, 0, 0;
	
		string: name, "canvas";
		num: cost, 5;
		tag: supplies;
	}
	
	entity Cardboard
	{
		icon: "Cardboard", 0, 0, 0;
	
		string: name, "cardboard";
		num: cost, 2;
		tag: supplies;
	}
	
	entity Air
	{
		icon: "Air", 0, 0, 0;
	
		string: name, "air";
		num: cost, 10;
		tag: supplies;
	}
	
	//Traps
	entity Candy
	{
		icon: "Candy", 0, 0, 0;
	
		string: name, "fancy candy";
		num: cost, 10;
		tag: trap;
		tag: item;
	}
	
	entity Apple
	{
		icon: "Apple", 0, 0, 0;
	
		string: name, "apple";
		num: cost, 2;
		tag: trap;		
		tag: item;
	}
	
	entity Pork
	{
		icon: "Pork", 0, 0, 0;
	
		string: name, "pork";
		num: cost, 7;
		tag: trap;		
		tag: item;
	}
	
	entity Cheese
	{
		icon: "Cheese", 0, 0, 0;
	
		string: name, "cheese";
		num: cost, 5;
		tag: trap;		
		tag: item;
	}
	
	//Tools
	entity Scissors
	{
		icon: "Scissors", 0, 0, 0;
	
		string: name, "scissors";
		num: cost, 3;
		tag: tool;		
		tag: item;
	}
	
	entity Vacuum	
	{
		icon: "Vacuum", 0, 0, 0;
	
		string: name, "vacuum";
		num: cost, 7;
		tag: tool;		
		tag: item;
	}
	
	entity TNT
	{
		icon: "TNT", 0, 0, 0;
	
		string: name, "TNT";
		num: cost, 20;
		tag: tool;				
		tag: item;
	}
	
	entity Sledgehammer
	{
		icon: "Sledgehammer", 0, 0, 0;
	
		string: name, "sledgehammer";
		num: cost, 10;
		tag: tool;		
		tag: item;
	}
	
	entity Flamethrower
	{
		icon: "Flamethrower", 0, 0, 0;
	
		string: name, "flamethrower";
		num: cost, 30;
		tag: tool;		
		tag: item;
	}
	
	entity NuclearWarhead
	{
		icon: "Nuclear Warhead", 0, 0, 0;
	
		string: name, "nuclear warhead";
		num: cost, 1000000;
		tag: tool;
		tag: item;
	}
	
	//Money
	entity dollar5
	{
		icon: "Five Dollar Bill", 0, 0, 0;
	
		string: name, "five dollars";
		num: value, 5;
		num: odds, 9; //Out of 10
		tag: money;
	}
	
	entity dollar10
	{
		icon: "Ten Dollar Bill", 0, 0, 0;
	
		string: name, "ten dollars";
		num: value, 10;
		num: odds, 7; //Out of 10
		tag: money;
	}

	entity dollar20
	{
		icon: "Twenty Dollar Bill", 0, 0, 0;
	
		string: name, "twenty dollars";
		num: value, 20;
		num: odds, 5; //Out of 10
		tag: money;
	}
	
	entity dollar1000000
	{
		icon: "Million Dollar Bill", 0, 0, 0;
	
		string: name, "one million dollars";
		num: value, 1000000;
		num: odds, 1; //Out of 10
		tag: money;
	}
	
	///////////
	// Verbs //
	///////////
	verb WakeUpWolf
	{
		icon: "Wake Up Wolf", 0, 0, 0;
	
		variable ?pigs
		{
			where: ?pigs has tag pig;
		}
		
		preconditions
		{
			where: ?me has tag story;
			where: not Wolf has tag active;
			where: all ?pigs has tag hasSupplies;
			where: all ?pigs has tag hasHouse;
		}
		
		case WolfBecomesActive
		{
			do: Wolf add tag active;
			do: ?pigs remove tag active;
			do: ?pigs remove tag active;
			do: ?pigs remove tag active;
			
			page wakeUp
			{
				text: "Wolf wakes up. He is hungry. How about some pig?";
			}
		}
	}
	
	verb BuySupplies
	{
		icon: "Buy Supplies", 0, 0, 0;
	
		argument ?supplies
		{
			where: ?supplies has tag supplies;
			where: not ?supplies has tag bought;
			where: ?me money >= ?supplies cost;
		}
		
		preconditions
		{
			where: ?me has tag pig;
			where: ?me has tag active;
			where: not ?me has tag lookingForMoney;
		}
		
		case purchase
		{	
			do: ?me add num money, (?me money - ?supplies cost);
			do: ?me add relate has, ?supplies;
			do: ?supplies add tag bought;
			
			page purchase
			{
				text: "?me.name spent $?supplies.cost to buy the ?supplies.name. ?me.pnSubject now only has $?me.money";
			}
		}
	}
	
	verb BuildHouse
	{
		icon: "Build House", 0, 0, 0;
	
		argument ?supplies
		{
			where: ?me has ?supplies;
		}
		
		preconditions
		{
			where: ?me has tag pig;
			where: ?me has tag active;
			where: not ?me has tag lookingForMoney;
		}
		
		case build
		{
			do: ?me add relate inHouse, ?supplies;
			do: ?me remove relate has, ?supplies;
			do: ?me remove tag active;
			
			page verb
			{
				text: "?me.name built a house of ?supplies.name.";
			}
		}
	}
	
	verb LookForMoney
	{
		icon: "Look for Money", 0, 0, 0;
		
		preconditions
		{
			where: ?me has tag active;
			where: not ?me has tag foundMoney;
		}
		
		case goLook
		{
			do: ?me add tag lookingForMoney;
		
			page goLook
			{
				text: "?me.name went searching for money in the grass fields.";
			}
		}
	}
	
	verb GiveMoney
	{
		icon: "Give Money", 0, 0, 0;
	
		argument ?money
		{
			where: ?money has tag money;
		}
		
		argument ?recipient
		{
			where: ?recipient has tag active;
			where: ?recipient has tag lookingForMoney;
		}
		
		preconditions
		{
			where: ?me has tag moneyGiver;
		}
		
		case find5
		{
			where: ?money value = 5;
			
			do: ?recipient add num money, (?recipient money + 5);
			do: ?recipient remove tag lookingForMoney;
			do: ?recipient add tag foundMoney;
			
			page verb
			{
				text: "?me.name found ?money.name while walking around.";
			}
		}
		
		case find10
		{
			where: ?money value = 10;
			
			do: ?recipient add num money, (?recipient money + 10);
			do: ?recipient remove tag lookingForMoney;
			do: ?recipient add tag foundMoney;
			
			page verb
			{
				text: "?me.name found ?money.name while walking around.";
			}
		}
		
		case find20
		{
			where: ?money value = 20;
			
			do: ?recipient add num money, (?recipient money + 20);
			do: ?recipient remove tag lookingForMoney;
			do: ?recipient add tag foundMoney;
			
			page verb
			{
				text: "?me.name found ?money.name while walking around.";
			}
		}
		
		case find1000000
		{
			where: ?money value = 1000000;
			
			do: ?recipient add num money, (?recipient money + 1000000);
			do: ?recipient remove tag lookingForMoney;
			do: ?recipient add tag foundMoney;
			
			page verb
			{
				text: "?me.name found ?money.name while walking around.";
			}
		}
		
		case findFail
		{
			do: ?recipient remove tag lookingForMoney;
			do: ?recipient add tag foundMoney;

			page verb
			{
				text: "ERROR: DEFAULT CASE FOR MONEY SEARCH REACHED";
			}
		}
	}
	
	/////////////
	// Endings //
	/////////////
	ending Temp
	{
		where: Wolf has tag active;
		
		page end
		{
			text: "To be continued...";
		}
	}
}