//Story World - Journey to the Moon: Created by J. M. Stark

storyworld JourneyToTheMoon
{
	user: Linus;

	////////////////////////////////////////////////////
	// Beginning /////////////////////////////////////
	////////////////////////////////////////////////////
	
	beginning
	{
		//The beginning of the story shows the launch into space and the landing onto the moon.
		//Once the user lands on the moon, their ability to interact begins as they explore with
		//their three counterparts.
		
		page LaunchDescript
		{
			text: "A rocket points upward, ready to launch. The countdown begins.";
		}
		
		page Launch5
		{
			text: "5";		
		}
		
		page Launch4
		{
			text: "4";		
		}
		
		page Launch3
		{
			text: "3";		
		}
		
		page Launch2
		{
			text: "2";		
		}
		
		page Launch1
		{
			text: "1";		
		}
		
		page LaunchLiftOff
		{
			text: "Lift off!";		
		}
		
		page TheMoon
		{
			text: "The rocket is flying to the moon.";		
		}
		
		page LandingOnTheMoon
		{
			text: "It lands inside a large crater on the moon's surface.";		
		}
		
		page ExitTheCraft
		{
			text: "Linus and his peers exit the rocket to explore the lunar world.";		
		}
	}
	
	input
	{
		text: "What should Linus do?";
	}
	
	////////////////////////////////////////////////////
	// Entities ////////////////////////////////////////
	////////////////////////////////////////////////////
	
	//People
	
	entity Linus
	{
		icontext: "Linus", 35, 148, 244;
		tag: person;
		tag: canWalk;
		string: name, "Linus";
		relate: at, Crater;
		
		num: mood, 3;
		num: skill, 2;
	}
	
	entity April
	{
		icontext: "April", 244, 35, 178;
		tag: person;
		tag: canWalk;
		string: name, "April";
		relate: at, Crater;
		
		num: mood, -1;
		num: skill, 3;
	}
	
	entity Whitney
	{
		icontext: "Whitney", 241, 198, 26;
		tag: person;
		tag: canWalk;
		string: name, "Whitney";
		relate: at, Crater;
		
		num: mood, 4;
		num: skill, 0;
	}
	
	entity Randal
	{
		icontext: "Randal", 90, 196, 32;
		tag: person;
		tag: canWalk;
		string: name, "Randal";
		relate: at, Crater;
		
		num: mood, -3;
		num: skill, 5;
	}
	
	//Places
	//Outside
	
	entity Crater
	{
		icontext: "Crater", 140, 149, 177;
		tag: place;
		string: name, "the crater";
		relate: connected, Flatscape;
		relate: connected, RocketCabin;
	}
	
	entity Flatscape
	{
		icontext: "Flatscapes", 140, 149, 177;
		tag: place;
		string: name, "the vast flatscapes";
		relate: connected, Hills;
		relate: connected, Pits;
		relate: connected, Canyon;
		relate: connected, Crater;
	}
	
	entity Hills
	{
		icontext: "Hills", 140, 149, 177;
		tag: place;
		string: name, "the hills";
		relate: connected, Flatscape;
		relate: connected, MoonBaseFrontDoor;
	}
	
	entity Pits
	{
		icontext: "Pits", 140, 149, 177;
		tag: place;
		string: name, "the sea of pits";
		relate: connected, Flatscape;
	}
	
	entity Canyon
	{
		icontext: "Canyon", 140, 149, 177;
		tag: place;
		string: name, "the rotten canyon";
		relate: connected, Flatscape;
		relate: connected, SecretCave;
	}
	
	entity SecretCave
	{
		icontext: "Secret Cave", 140, 149, 177;
		tag: place;
		string: name, "the hidden cave";
		relate: connected, Canyon;
	}
	
	//Inside
	
	entity RocketCabin
	{
		icontext: "Rocket", 140, 149, 177;
		tag: place;
		string: name, "the inside of the rocket";
		relate: connected, Crater;
	}
	
	entity MysteryRocketCabin
	{
		icontext: "Mysterious Rocket", 140, 149, 177;
		tag: place;
		string: name, "the inside of the large, mysterious rocket";
		relate: connected, MoonBaseLaunchBay;
	}
	
	entity MoonBaseFrontDoor
	{
		icontext: "Outside Front Door", 140, 149, 177;
		tag: place;
		string: name, "the outside of the steel door";
		relate: connected, Hills;
		relate: connected, MoonBaseHallway;
	}
	
	entity MoonBaseHallway
	{
		icontext: "Hallway", 140, 149, 177;
		tag: place;
		string: name, "the hallway";
		relate: connected, MoonBaseFrontDoor;
		relate: connected, MoonBaseLivingQuarters;
		relate: connected, MoonBaseLab;
		relate: connected, MoonBaseLaunchBay;
	}
	
	entity MoonBaseLivingQuarters
	{
		icontext: "Living Quarters", 140, 149, 177;
		tag: place;
		string: name, "the living quarters";
		relate: connected, MoonBaseHallway;
		relate: connected, MoonBaseHiddenStorage;
	}
	
	entity MoonBaseLab
	{
		icontext: "Lab", 140, 149, 177;
		tag: place;
		string: name, "the lab";
		relate: connected, MoonBaseHallway;
	}
	
	entity MoonBaseLaunchBay
	{
		icontext: "Launch Bay", 140, 149, 177;
		tag: place;
		string: name, "the bay";
		relate: connected, MoonBaseHallway;
		relate: connected, LargeRocketCabin;
	}
	
	entity MoonBaseHiddenStorage
	{
		icontext: "Hidden Storage", 140, 149, 177;
		tag: place;
		string: name, "the hidden storage room";
		relate: connected, MoonBaseLivingQuarters;
	}
	
	//Abstract
	//Insults
	entity Insult1
	{
		icontext: "Poopy Face", 112, 64, 21;
		tag: insult;
		tag: insult1;
	}
	
	entity Insult2
	{
		icontext: "Dumb Baby", 125, 208, 255;
		tag: insult;
		tag: insult2;
	}
	
	entity Insult3
	{
		icontext: "Disgusting Jerk", 57, 88, 23;
		tag: insult;
		tag: insult3;
	}
	
	entity Insult4
	{
		icontext: "Mustard-Stained Underpants", 181, 145, 0;
		tag: insult;
		tag: insult4;
	}
	
	entity Jokes
	{
		tag: canyonJoke;  
		tag: craterJoke;
		tag: personFrozenJoke;
		tag: flatscapesJoke;
		tag: hillsJoke;
		tag: pitsJoke;
		tag: hallwayJoke;
		tag: labJoke;
		tag: hiddenStorageJoke;
	}
	
	////////////////////////////////////////////////////
	// Verbs //////////////////////////////////////////
	////////////////////////////////////////////////////
	
	//verb Radio
	//{
	
	//}
	
	//verb UseKeyCard 
	//{
	
	//}
	
	//verb Punch
	//{
	
	//}
	
	//verb Compliment
	//{
	
	//}
	
	verb Insult
	{
		icontext: "Insult", 255, 219, 20;
	
		variable ?myLocation
		{
			where: ?myLocation has tag place;
			where: ?me.at = ?myLocation;
		}

		argument ?jerk
		{
			where: ?jerk has tag person;
			where: ?jerk.at = ?myLocation;
			where: ?jerk.name != string ?me.name;
		}
		
		argument ?insult
		{
			where: ?insult has tag insult;
		}

		case Insult1
		{
			where: ?insult has tag insult1;
			
			page verb
			{
				text: "?me calls ?jerk a poopy face.";
			}
		}
		
		case Insult2
		{
			where: ?insult has tag insult2;
			
			page verb
			{
				text: "?me calls ?jerk a dumb baby.";
			}
		}
		
		case Insult3
		{
			where: ?insult has tag insult3;
	
			page verb
			{
				text: "?me calls ?jerk a disgusting jerk.";
			}
		}
		
		case Insult4
		{
			where: ?insult has tag insult4;
			
			page verb
			{
				text: "?me says ?jerk is worse than mustard-stained underpants.";
			}
		}
		
		discriminator userInRoom
		{
			where: Linus.at = ?myLocation;
		}		
	}
	
	verb HighFive
	{
		icontext: "High Five", 239, 134, 40;
	
		variable ?myLocation
		{
			where: ?myLocation has tag place;
			where: ?me.at = ?myLocation;
		}
	
		argument ?buddy
		{
			where: ?buddy has tag person;
			where: ?buddy.at = ?myLocation;
		}
		
		preconditions
		{
			where: ?me.skill > 1;
		}
		
		case hit
		{
			where: ?buddy.skill > 1;
			
			page verb
			{
				text: "?me high fives ?buddy and it is totally awesome!";
			}
		}
		
		case miss
		{
			where: ?buddy.skill <= 0;
			
			page verb
			{
				text: "?me tries to high five ?buddy but it clumsily misses.";
			}
		}
		
		discriminator userInRoom
		{
			where: Linus.at = ?myLocation;
		}		
	}
	
	verb Goto
	{
		icontext: "Go to", 199, 63, 42;
	
		variable ?fromLocation
		{
			where: ?fromLocation has tag place;
			where: ?me.at = ?fromLocation;
		}
		
		argument ?toLocation
		{
			text: "Where to go?";
			where: ?toLocation has tag place;
			where: all ?fromLocation.connected = ?toLocation;
		}
		
		preconditions
		{
			where: ?me has tag canWalk;
			where: ?fromLocation != null;
		}
		
		case Walk
		{
			do: ?me remove relate at, ?fromLocation;
			do: ?me add relate at, ?toLocation;
			
			page verb
			{
				text: "?me.name goes from ?fromLocation.name to ?toLocation.name.";
			}
		}	
		
		discriminator userInRoom
		{
			where: Linus.at = ?fromLocation;
		}
		
		discriminator userInNextRoom
		{
			where: Linus.at = ?toLocation;
		}
	}
	
	//verb MakeChemical
	//{
	
	//}
	
	//verb Grab
	//{
	
	//}
	
	//verb Steal
	//{
	
	//}
	
	//verb AskFor
	//{
	
	//}
	
	//verb Give
	//{
	
	//}
	
	//verb Freeze
	//{
	
	//}
	
	//verb Shrink
	//{
	
	//}
	
	//verb Melt
	//{
	
	//}
	
	//verb OpenPortal
	//{
	
	//}
	
	//verb Tell
	//{
	
	//}
	
	//verb Observe
	//{
	
	//}
	
	//verb PopOutOfHole
	//{
	
	//}
	
	//verb Eat
	//{
	
	//}
	
	//verb DisappearIntoHole
	//{
	
	//}
	
	//verb Jump
	//{
	
	//}
	
	//verb LaunchRocket
	//{
	
	//}
	
	//verb Hide
	//{
	
	//}
	
	//verb ComeOutOfHiding
	//{
	
	//}

	verb Joke
	{
		icontext: "Joke", 100, 40, 174;
	
		variable ?myLocation
		{
			where: ?myLocation has tag place;
			where: ?me.at = ?myLocation;
		}
	
		variable ?allInArea
		{
			where: ?allInArea has tag person;
			where: ?allInArea.at = ?myLocation;
		}
	
		preconditions
		{
			//where: ?me.mood > 1;
		}
		
		case canyonJoke
		{
			where: ?me.at = Canyon;
			where: Jokes has tag canyonJoke;
			
			do: Jokes remove tag canyonJoke;
			do: ?allInArea mood + 2;
			
			page verb
			{
				text: "?me jokes, 'Something smells a bit too cheesey!'";
			}
		}
		
		case craterJoke
		{
			where: ?me.at = Crater;
			where: Jokes has tag craterJoke;
			
			do: Jokes remove tag craterJoke;
			do: ?allInArea mood + 2;
			
			page verb
			{
				text: "?me jokes, 'I can see my house from here!'";
			}			
		}
		
		case personFrozenJoke
		{
			where: one ?allInArea has tag frozen;
			where: Jokes has tag craterJoke;
			
			do: Jokes remove tag craterJoke;
			do: ?allInArea mood + 2;
			
			page verb
			{
				text: "?me jokes, 'Looks like someone is a bit chilly!'";
			}			
		}
		
		case flatscapesJoke
		{
			where: ?me.at = Flatscape;
			where: Jokes has tag flatscapesJoke;
			where: ?allInArea != null;
			
			do: Jokes remove tag flatscapesJoke;
			do: ?allInArea mood + 2;
			
			page verb
			{
				text: "?me jokes, 'This area is flat, but not as flat as ?allInArea's humor!'";
			}	
		}
		
		case hillsJoke
		{
			where: ?me.at = Hills;
			where: Jokes has tag hillsJoke;
			
			do: Jokes remove tag hillsJoke;
			do: ?allInArea mood + 2;
			
			page verb
			{
				text: "?me jokes, 'Look, the moon has goosebumps!'";
			}			
		}
		
		case pitsJoke
		{
			where: ?me.at = Pits;
			where: Jokes has tag pitsJoke;
			
			do: Jokes remove tag pitsJoke;
			do: ?allInArea mood + 2;
			
			page verb
			{
				text: "?me jokes, 'Don't fall in. You might end up in China!'";
			}	
		}
		
		case hallwayJoke
		{
			where: ?me.at = MoonBaseHallway;
			where: Jokes has tag hallwayJoke;
			
			do: Jokes remove tag hallwayJoke;
			do: ?allInArea mood + 2;
			
			page verb
			{
				text: "?me jokes, 'Not the most spacious home, huh?'";
			}	
		}
		
		case labJoke
		{
			where: ?me.at = MoonBaseLab;
			where: Jokes has tag labJoke;
			
			do: Jokes remove tag labJoke;
			do: ?allInArea mood + 2;
			
			page verb
			{
				text: "?me jokes, 'Let us make a science!'";
			}	
		}
		
		case hiddenStorageJoke
		{
			where: ?me.at = MoonBaseHiddenStorage;
			where: Jokes has tag hiddenStorageJoke;
			
			do: Jokes remove tag hiddenStorageJoke;
			do: ?allInArea mood + 2;
			
			page verb
			{
				text: "?me jokes, 'Why is this storage hidden? Is the owner afraid of looters?'";
			}	
		}
		
		discriminator userInRoom
		{
			where: Linus.at = ?myLocation;
		}
	}
	
	//verb Trip
	//{
	
	//}
	
	////////////////////////////////////////////////////
	// Endings ////////////////////////////////////////
	////////////////////////////////////////////////////
}